#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var meow = _interopDefault(require('meow'));
var updateNotifier = _interopDefault(require('update-notifier'));
var colors = _interopDefault(require('ansi-colors'));
var enquirer = require('enquirer');
var execa = _interopDefault(require('execa'));
var readPkgUp = require('read-pkg-up');
var path = require('path');

function exitWithMessage(message) {
  process.exitCode = 1;
  throw new Error(`${colors.red('ERROR')}: ${message}`)
}

function getPackage() {
  const {pkg: package_ = {}, path: file} = readPkgUp.sync();

  if (!package_) {
    exitWithMessage(
      `no ${colors.green('package.json')} found in ${colors.cyan(
        process.cwd()
      )}.`
    );
  }

  const {scripts = []} = package_;

  const commands = Object.keys(scripts).map((script, index) => ({
    name: script,
    message: scriptMessage(script, scripts[script]),
    command: scripts[script],
    index,
    value: script,
  }));

  function scriptMessage(name, cmd) {
    return `${colors.bold(name)} ${colors.gray(cmd)}`
  }

  const folder = path.dirname(file);

  if (scripts.length === 0) {
    exitWithMessage(`no scripts found in ${colors.cyan(file)}.`);
  }

  return {pkg: package_, file, folder, scripts: commands}
}

const {file, scripts, folder} = getPackage();

function promptScripts() {
  const choices = scripts;
  const questions = {
    type: 'autocomplete',
    name: 'answer',
    message: 'Choice a script to execute',
    limit: Math.min(scripts.length, 15),
    suggest(input, choices) {
      return choices.filter(({name}) =>
        name.toLowerCase().startsWith(input.toLowerCase())
      )
    },
    choices,
  };

  console.log(`scripts in ${colors.cyan(file)}`);

  return enquirer.prompt(questions)
}

function runScript(client, name) {
  if (!scripts.some(({name: scriptName}) => name === scriptName)) {
    exitWithMessage(
      `no script named ${colors.red(name)} in ${colors.cyan(file)}.`
    );
  }

  return execa(client, ['run', name], {
    stdio: 'inherit',
    folder,
  })
}

function main(command, script, options = {}) {
  const client = options.noYarn ? 'npm' : 'yarn';

  if (script) {
    runScript(client, script);
  } else {
    promptScripts(options).then(({answer}) => runScript(client, answer));
  }
}

updateNotifier({pkg: require('../package.json')}).notify();

const cli = meow(
  `
  Usage
    $ npm-run <script>
    $ yarn-run <script>
    $ nr <script>
    $ yr <script>

  Options
    --no-yarn ${colors.cyan('use npm instead of yarn')}

  Examples
    $ npm-run ${colors.cyan('build')}
`,
  {
    flags: {
      npm: {
        type: 'boolean',
      },
    },
  }
);

main(cli.input[0], cli.input[1], cli.flags);
